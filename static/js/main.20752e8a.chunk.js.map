{"version":3,"sources":["FormFilm.js","App.js","serviceWorker.js","index.js"],"names":["FormFilm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","defineProperty","target","name","value","submitForm","preventDefault","config","method","headers","Content-Type","body","JSON","stringify","state","fetch","then","res","json","error","alert","concat","catch","console","poster","comment","react_default","a","createElement","Fragment","className","onSubmit","type","placeholder","Component","App","src_FormFilm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAsEeA,qBAlEX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQVQ,SAAW,SAACC,GACRR,EAAKS,SAALR,OAAAS,EAAA,EAAAT,CAAA,GACKO,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,SAXfb,EAenBc,WAAa,SAACN,GACVA,EAAEO,iBACF,IAAMC,EAAS,CACXC,OAAQ,OACRC,QAAS,CACLC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUtB,EAAKuB,QAK9BC,MAFY,qDAEDR,GACNS,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACEA,EAAIE,MACJC,MAAMH,EAAIE,OAEVC,MAAK,wCAAAC,OAAyCJ,EAAzC,QAEVK,MAAM,SAAAvB,GACLwB,QAAQJ,MAAMpB,GACdqB,MAAM,+BAnCd7B,EAAKuB,MAAQ,CACTX,KAAM,GACNqB,OAAQ,GACRC,QAAS,IALElC,wEA2Cf,OACImC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,MAAIE,UAAU,oBAAd,cACAJ,EAAAC,EAAAC,cAAA,QAAMG,SAAUrC,KAAKW,WAAYyB,UAAU,QACvCJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACXJ,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOF,UAAU,eAAe3B,KAAK,OAAOC,MAAOV,KAAKoB,MAAMX,KAAML,SAAUJ,KAAKI,SAAUmC,YAAY,qBAEzHP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACXJ,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,MAAMF,UAAU,eAAe3B,KAAK,SAASC,MAAOV,KAAKoB,MAAMU,OAAQ1B,SAAUJ,KAAKI,SAAUmC,YAAY,sBAE5HP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACXJ,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,YAAUE,UAAU,eAAe3B,KAAK,UAAUC,MAAOV,KAAKoB,MAAMW,QAAS3B,SAAUJ,KAAKI,SAAUmC,YAAY,sBAEtHP,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASF,UAAU,mBAAhC,mBA5DGI,cCSRC,MARf,WACE,OACET,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAACQ,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.20752e8a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./Form.css\"\n\nclass FormFilm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            poster: '',\n            comment: '',\n        }\n    }\n\n    onChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        });\n    }\n\n    submitForm = (e) => {\n        e.preventDefault();\n        const config = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(this.state),\n        };\n\n        const url = \"http://campus-bordeaux.ovh:3001/api/quests/movies/\";\n\n        fetch(url, config)\n            .then(res => res.json())\n            .then(res => {\n                if (res.error) {\n                    alert(res.error);\n                } else {\n                    alert(`Added your favorite film with the ID ${res}!`);\n                }\n            }).catch(e => {\n                console.error(e);\n                alert('Error during update film');\n            });\n    }\n\n\n    render() {\n        return (\n            <>\n                <h1 className=\"text-center mt-3\">Formulaire</h1>\n                <form onSubmit={this.submitForm} className=\"mt-5\">\n                    <div className=\"form-group\">\n                        <label>Your name film :</label>\n                        <input type=\"text\" className=\"form-control\" name=\"name\" value={this.state.name} onChange={this.onChange} placeholder=\"Enter your film\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Your Poster film :</label>\n                        <input type=\"url\" className=\"form-control\" name=\"poster\" value={this.state.poster} onChange={this.onChange} placeholder=\"your poster film\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Your comment :</label>\n                        <textarea className=\"form-control\" name=\"comment\" value={this.state.comment} onChange={this.onChange} placeholder=\"your comment ...\" />\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                </form>\n            </>\n        );\n    }\n}\n\nexport default FormFilm;","import React from 'react';\nimport './App.css';\nimport FormFilm from './FormFilm.js';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <FormFilm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}